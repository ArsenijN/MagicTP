plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

version = internal_version // Use the internal version for the build
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '-Ddebug=true' // Add this line
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // ForgeGradle automatically adds the Forge maven and Maven Central for you
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

// Define the build counter file
def buildCounterFile = file("${projectDir}/build-counter.txt")

// Read the current build count from the file
def buildCount = buildCounterFile.exists() ? buildCounterFile.text.trim().toInteger() : 105 // Default to 105 if the file doesn't exist

// Increment the build count
buildCount++

// Write the updated build count back to the file
buildCounterFile.text = buildCount.toString()

// Define the devVersion dynamically based on the build count
def devVersion = "i${buildCount}"

// Define whether the build is stable
def isStable = false // Set to true for stable builds

// Configure the JAR task to use the dynamic devVersion
tasks.named('jar', Jar).configure {
    def stability = isStable ? "" : "-i${buildCount}" // Append build count only if not stable
    def baseName = isStable 
        ? "${mod_id}-fgmc${minecraft_version}" // Stable naming
        : "${mod_id}-forge-mc${minecraft_version}" // Debug naming

    // Set the archive name dynamically
    archiveBaseName.set(baseName)
    archiveVersion.set("${mod_version}${stability}")
    archiveClassifier.set("") // Leave empty for no additional classifier

    // Ensure no other task overrides these values
    doLast {
        println "Jar will be named: ${archiveBaseName.get()}-${archiveVersion.get()}.jar"
    }
}

// Pass the devVersion and other properties to the processResources task
tasks.named('processResources', ProcessResources).configure {
    // Check for the debug property in both Gradle project properties and JVM system properties
    def debug = project.hasProperty('debug') ? project.debug.toBoolean() : System.getProperty('debug', 'false').toBoolean()
    inputs.property("debug", debug)

    var replaceProperties = [
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version: forge_version,
            forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id,
            mod_name: mod_name,
            mod_license: mod_license,
            mod_version: mod_version,
            mod_authors: mod_authors,
            mod_description: mod_description,
            devVersion: devVersion,
            debug: debug // Add debug property here
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}